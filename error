ERROR! We were unable to read either as JSON nor YAML, these are the errors we got from each:
JSON: Expecting value: line 1 column 1 (char 0)

Syntax Error while loading YAML.
  mapping values are not allowed in this context

The error appears to be in '/root/python-automotion/gather_info.yml': line 6, column 48, but may
be elsewhere in the file depending on the exact syntax problem.

The offending line appears to be:

    - name: Get CPU model
      shell: lscpu | grep 'Model name' | awk -F: '{print $2}' | xargs
                                               ^ here
"msg": "template error while templating string: unexpected char '$' at 45. String: lscpu | grep 'Model name' | awk -F: '{{print $2}}' | xargs. unexpected char '$' at 45"}
ERROR! We were unable to read either as JSON nor YAML, these are the errors we got from each:
JSON: Expecting value: line 1 column 1 (char 0)

Syntax Error while loading YAML.
  found unknown escape character

FAILED! => {"changed": true, "cmd": "lscpu | grep 'CPU MHz' | awk '{print \\$3}'", "delta": "0:00:00.011041", "end": "2025-01-23 05:51:10.864332", "msg": "non-zero return code", "rc": 1, "start": "2025-01-23 05:51:10.853291", "stderr": "awk: cmd. line:1: {print \\$3}\nawk: cmd. line:1:        ^ backslash not last character on line\nawk: cmd. line:1: {print \\$3}\nawk: cmd. line:1:        ^ syntax error", "stderr_lines": ["awk: cmd. line:1: {print \\$3}", "awk: cmd. line:1:        ^ backslash not last character on line", "awk: cmd. line:1: {print \\$3}", "awk: cmd. line:1:        ^ syntax error"], "stdout": "", "stdout_lines": []}


The error appears to be in '/root/python-automotion/gather_info.yml': line 6, column 59, but may
be elsewhere in the file depending on the exact syntax problem.

The offending line appears to be:

    - name: Get CPU model
      shell: "lscpu | grep 'Model name' | awk -F: '{print \$2}' | xargs"
                                                          ^ here
This one looks easy to fix. It seems that there is a value started
with a quote, and the YAML parser is expecting to see the line ended
with the same kind of quote. For instance:

    when: "ok" in result.stdout

Could be written as:

   when: '"ok" in result.stdout'

Or equivalently:

   when: "'ok' in result.stdout"

FAILED! => {"changed": true, "cmd": "lscpu | grep 'CPU MHz' | awk '{print \\$3}'", "delta": "0:00:00.011041", "end": "2025-01-23 05:51:10.864332", "msg": "non-zero return code", "rc": 1, "start": "2025-01-23 05:51:10.853291", "stderr": "awk: cmd. line:1: {print \\$3}\nawk: cmd. line:1:        ^ backslash not last character on line\nawk: cmd. line:1: {print \\$3}\nawk: cmd. line:1:        ^ syntax error", "stderr_lines": ["awk: cmd. line:1: {print \\$3}", "awk: cmd. line:1:        ^ backslash not last character on line", "awk: cmd. line:1: {print \\$3}", "awk: cmd. line:1:        ^ syntax error"], "stdout": "", "stdout_lines": []}
FAILED! => {"changed": true, "cmd": "lscpu | grep 'CPU MHz' | awk '{print \\$3}'", "delta": "0:00:00.011041", "end": "2025-01-23 05:51:10.864332", "msg": "non-zero return code", "rc": 1, "start": "2025-01-23 05:51:10.853291", "stderr": "awk: cmd. line:1: {print \\$3}\nawk: cmd. line:1:        ^ backslash not last character on line\nawk: cmd. line:1: {print \\$3}\nawk: cmd. line:1:        ^ syntax error", "stderr_lines": ["awk: cmd. line:1: {print \\$3}", "awk: cmd. line:1:        ^ backslash not last character on line", "awk: cmd. line:1: {print \\$3}", "awk: cmd. line:1:        ^ syntax error"], "stdout": "", "stdout_lines": []}

